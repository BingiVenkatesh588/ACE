BROKER SCHEMA com.cbo.co.ChequeBookRequest
PATH com.cbo.co.common.esql;
DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
DECLARE RAW_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE ERR_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE EXCEPTION_Q EXTERNAL CHARACTER '';
DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
DECLARE ALL_CBO_HTTP_RES EXTERNAL CHARACTER'';
DECLARE ns NAMESPACE 'http://temenos.com/MMT';
DECLARE ns22 NAMESPACE 'http://temenos.com/CHEQUEISSUEINPUTCBOWS' ;
DECLARE ns4 NAMESPACE 'http://temenos.com/CHEQUEISSUE';
DECLARE IsLogRequired , CBRBackendURL EXTERNAL CHARACTER'';

CREATE COMPUTE MODULE CHEQUEBOOKRequestFraming
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
	    SET Environment.Variables.Properties = InputRoot.Properties ;
		SET Environment.Variables.MQMD = InputRoot.MQMD;
		CALL FramingRequest();
		RETURN FALSE;
	END;
CREATE PROCEDURE FramingRequest() BEGIN
		SET Environment.MQRFH2= InputRoot.MQRFH2;
		DECLARE reqMsg,bindingOperatingName CHARACTER '';
		DECLARE rc BOOLEAN FALSE;
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding ;
		DECLARE inRef REFERENCE TO InputRoot.JSON.Data.CHEQUEBOOKREQUEST;
		DECLARE inSPCRef REFERENCE TO InputRoot.JSON.Data.CHEQUEBOOKREQUEST.CHEQUEISSUEINPUTCBOWSType ;
		SET Environment.Variables.reqMsg = getPayLoad(FIELDNAME(InputBody),inRef.JSON,encodeRef,ccsid);
--		-- SET DBLogging Properties ==============
--		DECLARE outRefer REFERENCE TO OutputRoot;
--		-- =================== CALLING DB RAW AUDIT LOGGING ==============
--		IF IsLogRequired LIKE 'Y' THEN
--			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'Application Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
--			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
--			PROPAGATE TO TERMINAL 'out1';
--		END IF;
		/* =================== CALLING DB RAW AUDIT LOGGING ENDING ==============*/
		/* =================== CALLING LOG4J LOGGING ==============*/
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;

		CALL writeToLogFile(MessageFlowLabel, 'ChequeBookRequestApp', 'DEBUG','==================================**********************************======================================') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ChequeBookRequestApp', 'DEBUG','..............Start CHEQUEBOOKRequest Application Request logging...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ChequeBookRequestApp', 'DEBUG',' Incoming Request::     '||Environment.Variables.reqMsg) INTO rc;
		--CALL writeToLogFile(MessageFlowLabel, 'ChequeBookRequestApp', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
		
		/* ========================== FIELD TO FIELD MAPPING =============================================== */
		--DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encoderef INTEGER InputRoot.Properties.Encoding;
		DECLARE outrefer REFERENCE TO OutputRoot;
		--DECLARE responceCode CHARACTER InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code" ;
		DECLARE inSoapRef REFERENCE TO InputRoot.SOAP ;
	--	DECLARE inRef REFERENCE TO InputRoot;
		DECLARE statusRef REFERENCE TO InputRoot.SOAP.Body.ns:CHEQUEBOOKREQUEST.Status;
		DECLARE successIndicator CHARACTER statusRef.successIndicator;
	--	SET Environment.t24resMsg = getPayLoad(FIELDNAME(InputBody),inSoapRef,encodeRef,ccsid);
		
		    CREATE LASTCHILD OF OutputRoot DOMAIN 'SOAP';
		    DECLARE outRef REFERENCE TO OutputRoot.SOAP;
			SET outRef.Context.Namespace.soapenv = 'http://schemas.xmlsoap.org/soap/envelope/';
			SET outRef.Context.Namespace.mmt = 'http://temenos.com/MMT';
			SET outRef.Context.XmlRoot.Envelope.Header = '';
			SET outRef.Context.XmlRoot.Envelope.Body = '';
			SET outRef.Header = '';
     		DECLARE outWebReqRef REFERENCE TO OutputRoot.SOAP.Body.ns:CHEQUEBOOKREQUEST.WebRequestCommon ;
			CREATE LASTCHILD OF OutputRoot.SOAP.Body.ns:CHEQUEBOOKREQUEST AS outWebReqRef NAME 'WebRequestCommon';
			SET outWebReqRef.company = inRef.WebRequestCommon.company;
			SET outWebReqRef.password = Environment.MQRFH2.passWord;
			SET outWebReqRef.userName = Environment.MQRFH2.userName;

			

--           DECLARE outOFSRef REFERENCE TO outRef.Body.ns:CHEQUEBOOKREQUEST_Validate.OfsFunction;
--           CREATE LASTCHILD OF OutputRoot.SOAP.Body.ns:CHEQUEBOOKREQUEST_Validate AS outOFSRef NAME 'OfsFunction';
--            SET outOFSRef.activityName= inRef.OfsFunction.activityName ;
--            SET outOFSRef.assignReason= inRef.OfsFunction.assignReason ;
--            SET outOFSRef.dueDate= inRef.OfsFunction.dueDate ;
--            SET outOFSRef.extProcess= inRef.OfsFunction.extProcess ;
--            SET outOFSRef.dueDate= inRef.OfsFunction.dueDate ;
--            SET outOFSRef.extProcess= inRef.OfsFunction.extProcess ;
--            SET outOFSRef.extProcessID= inRef.OfsFunction.extProcessID ;
--            SET outOFSRef.gtsControl= inRef.OfsFunction.gtsControl ;
--            SET outOFSRef.messageId= inRef.OfsFunction.messageId ;
--            SET outOFSRef.noOfAuth= inRef.OfsFunction.noOfAuth ;
--            SET outOFSRef.owner= inRef.OfsFunction.owner ;
--            SET outOFSRef.replace= inRef.OfsFunction.replace ;
--            SET outOFSRef.startDate= inRef.OfsFunction.startDate ;
--            SET outOFSRef.user= inRef.OfsFunction.user ;
  


            SET OutputRoot.SOAP.Body.ns:CHEQUEBOOKREQUEST.OfsFunction='';
			DECLARE outSPCRef REFERENCE TO OutputRoot.SOAP.Body.ns:CHEQUEBOOKREQUEST.CHEQUEISSUEINPUTCBOWSType ;
			CREATE LASTCHILD OF OutputRoot.SOAP.Body.ns:CHEQUEBOOKREQUEST AS outSPCRef NAME 'CHEQUEISSUEINPUTCBOWSType';
			
			--SET outSPCRef.id=inSPCRef.id;
			--SET OutputRoot.SOAP.Body.ns:CHEQUEBOOKREQUEST_Validate.CHEQUEISSUEINPUTCBOWSType.id=inSPCRef.id;
			 
			SET OutputRoot.SOAP.Body.ns:CHEQUEBOOKREQUEST.CHEQUEISSUEINPUTCBOWSType.(XMLNSC.Attribute)id = FIELDVALUE(inSPCRef.id);
			
			SET outSPCRef.ns22:ChequeStatusInput90=inSPCRef.ChequeStatusInput90;
			
----			SET outSPCRef.ns22:ChequeStatusInput90 =  inSPCRef.ChequeStatusInput90;
----			SET outSPCRef.ns22:IssueDate=inSPCRef.IssueDate;
----			SET outSPCRef.ns22:NumberIssued= inSPCRef.NumberIssued;
----			SET outSPCRef.ns22:AccountCurrency=inSPCRef.AccountCurrency;
----			SET outSPCRef.ns22:StockRegisterID=inSPCRef.StockRegisterID;
----			SET outSPCRef.ns22:StockSeriesID=inSPCRef.StockSeriesID;
----			SET outSPCRef.ns22:StartingChequeNo=inSPCRef.StartingChequeNo;
----			SET outSPCRef.ns22:gNOTES.ns22:Remarks=inSPCRef.gNOTES.REMARKS;
			
--			DECLARE envRef REFERENCE TO Environment.SOAP;
--			
--			CREATE LASTCHILD OF Environment AS envRef;
--		  --  SET envRef = outRef ;
--		SET envRef = OutputRoot;
--PROPAGATE TO TERMINAL 'out2';
        SET Environment.envref = OutputRoot;

			SET Environment.reqMsgT24 = getPayLoad(FIELDNAME(InputBody),outRef.Body,encodeRef,ccsid);
			SET OutputRoot = NULL ;
			/* =================== CALLING LOG4J LOGGING  ==============*/
		/* =================== CALLING DB RAW AUDIT LOGGING ==============*/
		DECLARE outDbRef REFERENCE TO OutputRoot ;
		CALL writeToLogFile(MessageFlowLabel, 'ChequeBookRequestApp', 'DEBUG','..............Start ChequeBookRequest T24  Request logging...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ChequeBookRequestApp', 'DEBUG','T24  Request::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ChequeBookRequestApp', 'DEBUG',Environment.reqMsgT24) INTO rc;
		IF IsLogRequired LIKE 'Y' THEN 
			CALL DBLogging(Environment.MQRFH2.ESBHeader.Message_Id,Environment.reqMsgT24,'T24 Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outDbRef);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		/* =================== CALLING DB RAW AUDIT LOGGING ENDING ==============*/
		SET OutputRoot.Properties = InputRoot.Properties ;
		SET OutputRoot = Environment.envref ;
		SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.WebServiceURL = CBRBackendURL ;
		--SET OutputLocalEnvironment.Destination.File.Name='test.txt';
		PROPAGATE TO TERMINAL 'out';
			
	END;
	
END MODULE;

CREATE COMPUTE MODULE CHEQUEBOOKREQUEST_MsgFlow_generatingChannelResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		 CALL generatingChannelResponse();
		RETURN TRUE;
	END;

		CREATE PROCEDURE generatingChannelResponse() 
		BEGIN
		
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding ;
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId ;
		DECLARE rc BOOLEAN FALSE;
		/* =================== CALLING LOG4J LOGGING ==============*/
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		
		DECLARE responcecode CHARACTER InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code" ;
		DECLARE inSoapRef REFERENCE TO InputRoot.SOAP ;
		DECLARE t24Res ,t24ResStatus , chaRes CHARACTER '';
		SET t24Res = getPayLoad(FIELDNAME(InputBody),inSoapRef,encodeRef,ccsid);
		DECLARE statusRef REFERENCE TO InputRoot.SOAP.Body.ns:CHEQUEBOOKREQUESTResponse.Status ;
		SET t24ResStatus = statusRef.successIndicator ;
		-- DbLogging for the SOAP T24 Req Data --
	    DECLARE outDbRef REFERENCE TO OutputRoot ;
	       	
	      IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Environment.MQRFH2.ESBHeader.Message_Id,t24Res,'T24  Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outDbRef);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out';
		  END IF;
		  --End of DB Logging
		  SET OutputRoot = NULL;
		  --Log 4j Logging
		  CALL writeToLogFile(MessageFlowLabel, 'ChequeBookRequestApp', 'DEBUG','.............. CHEQUEBOOKREQUEST  T24 Response Logging..........') INTO rc;
		  CALL writeToLogFile(MessageFlowLabel, 'ChequeBookRequestApp', 'DEBUG','T24 CHEQUEBOOKREQUEST Response::'||t24Res) INTO rc;
		  --End of Log4j Logging
		  --Framing IFT JSON Response to Channel 
		  CASE
		  	
		  WHEN responcecode LIKE '200' AND t24ResStatus LIKE 'Success' THEN
		  	 	IF (statusRef.messages NOT LIKE '') THEN
			      CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
				  CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
				  CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('CHEQUEBOOKREQUESTResponse');
				  CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('ESBHeader');
				  CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('ESBStatus');
				  DECLARE headerRef REFERENCE TO OutputRoot.JSON.Data.*.ESBHeader;
				  DECLARE errorRef REFERENCE TO OutputRoot.JSON.Data.*.ESBStatus;
				  SET headerRef = Environment.MQRFH2.ESBHeader ;
				  SET errorRef.Status = 'Failure';
		          SET errorRef.responseCode = 'ESB_BRK_'||responcecode ;
		          SET errorRef.errorType = 'Functinal Error' ;
		          DECLARE messageRef REFERENCE TO InputRoot.SOAP.Body.ns:CHEQUEBOOKREQUESTResponse.Status.messages;
				CREATE FIELD errorRef.errorDescription IDENTITY(JSON.Array)errorDescription;
				DECLARE outErrMsgRef REFERENCE TO errorRef.errorDescription;
     			WHILE LASTMOVE(messageRef) DO
					CREATE LASTCHILD OF errorRef.errorDescription AS outErrMsgRef NAME 'errorDescription' ;
					SET outErrMsgRef = messageRef ;
					MOVE messageRef NEXTSIBLING ;
				END WHILE;
		          
			 ELSE
		  	CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON' ;
		  	CREATE LASTCHILD OF OutputRoot.JSON NAME 'Data';
		  	CREATE LASTCHILD OF OutputRoot.JSON.Data  NAME 'CHEQUEBOOKREQUESTResponse';
		  	CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME 'ESBHeader';	
		  	CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME 'Status';
		  	CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME 'CHEQUEISSUEType';
		  	--CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME 'ESBStatus';
		  	DECLARE inDataRef REFERENCE TO InputRoot.SOAP.Body.ns:CHEQUEBOOKREQUESTResponse.CHEQUEISSUEType ;
		  	DECLARE outRef REFERENCE TO OutputRoot.JSON.Data.CHEQUEBOOKREQUESTResponse ;
		  	DECLARE outStatusRef REFERENCE TO OutputRoot.JSON.Data.CHEQUEBOOKREQUESTResponse.Status ;
		  	DECLARE esbStatusRef REFERENCE TO OutputRoot.JSON.Data.CHEQUEBOOKREQUESTResponse.ESBStatus ;
		    SET outRef.ESBHeader = Environment.MQRFH2.ESBHeader ;
		    SET outStatusRef.transactionId = COALESCE(FIELDVALUE(statusRef.transactionId),'');
		    SET outStatusRef.messageId = COALESCE(FIELDVALUE(statusRef.messageId),'');
		    SET outStatusRef.successIndicator = COALESCE(FIELDVALUE(statusRef.successIndicator),'');
		    SET outStatusRef.application = COALESCE(FIELDVALUE(statusRef.application),'');
		    SET outStatusRef.messages = COALESCE(FIELDVALUE(statusRef.messages),'');
		    
		    DECLARE outCBRRef REFERENCE TO OutputRoot.JSON.Data.*.CHEQUEISSUEType ;
		      -- SET outCBRRef= inDataRef;
		    SET outCBRRef.id = inDataRef.id;
		    SET outCBRRef.CHEQUESTATUS =  COALESCE(FIELDVALUE(inDataRef.ns4:CHEQUESTATUS),'') ;
		    SET outCBRRef.CHEQUESTATUS =  COALESCE(inDataRef.ns4:CHEQUESTATUS,'') ;
		    SET outCBRRef.ISSUEDATE =  COALESCE(inDataRef.ns4:ISSUEDATE,'') ;
		    SET outCBRRef.NUMBERISSUED =  COALESCE(inDataRef.ns4:NUMBERISSUED,'') ;
		    SET outCBRRef.CURRENCY =  COALESCE(inDataRef.ns4:CURRENCY,'') ;
		    SET outCBRRef.CHARGES =  COALESCE(inDataRef.ns4:CHARGES,'') ;
		    SET outCBRRef.CHARGEDATE =  COALESCE(inDataRef.ns4:CHARGEDATE,'') ;
		    SET outCBRRef.STOCKREG =  COALESCE(inDataRef.ns4:STOCKREG,'') ;
		    SET outCBRRef.SERIESID =  COALESCE(inDataRef.ns4:SERIESID,'') ;
		    SET outCBRRef.CHQNOSTART =  COALESCE(inDataRef.ns4:CHQNOSTART,'') ;
		    SET outCBRRef.WAIVECHARGES =COALESCE(inDataRef.ns4:WAIVECHARGES,'');
--		    
		    DECLARE gClasstyperef REFERENCE TO InputRoot.SOAP.Body.ns:CHEQUEBOOKREQUESTResponse.CHEQUEISSUEType.ns4:gCLASSTYPE.ns4:mCLASSTYPE[>];
		    CREATE FIELD OutputRoot.JSON.Data.*.CHEQUEISSUEType.gCLASSTYPE.mCLASSTYPE IDENTITY(JSON.Array)mCLASSTYPE;
		    DECLARE outclasstyperef REFERENCE TO OutputRoot.JSON.Data.*.CHEQUEISSUEType.gCLASSTYPE.mCLASSTYPE;
		    WHILE LASTMOVE(gClasstyperef) DO
		    	CREATE LASTCHILD OF OutputRoot.JSON.Data.*.CHEQUEISSUEType.gCLASSTYPE.mCLASSTYPE AS outclasstyperef NAME 'mTAXCODE';
		    	SET outclasstyperef.m=COALESCE(FIELDVALUE(gClasstyperef.m),'');
		    	SET outclasstyperef.CLASSTYPE=COALESCE(FIELDVALUE(gClasstyperef.ns4:CLASSTYPE),'');
		    	SET outclasstyperef.MESSAGECLASS=COALESCE(FIELDVALUE(gClasstyperef.ns4:MESSAGECLASS),'');
		    	MOVE gClasstyperef NEXTSIBLING;
		    END WHILE;
		    
		     SET outCBRRef.ACTIVITY = COALESCE(inDataRef.ns4:ACTIVITY,'');
		     SET outCBRRef.AUTOCHEQUENUMBER =  COALESCE(inDataRef.ns4:AUTOCHEQUENUMBER,'') ;
		     SET outCBRRef.RESERVED9 =  COALESCE(inDataRef.ns4:RESERVED9,'') ;
		    SET outCBRRef.RESERVED8 =  COALESCE(inDataRef.ns4:RESERVED8,'') ;
		    SET outCBRRef.RESERVED7 =  COALESCE(inDataRef.ns4:RESERVED7,'') ;
		    SET outCBRRef.RESERVED6 =  COALESCE(inDataRef.ns4:RESERVED6,'') ;
		    SET outCBRRef.RESERVED5 =  COALESCE(inDataRef.ns4:RESERVED5,'') ;
		    SET outCBRRef.RESERVED4 =  COALESCE(inDataRef.ns4:RESERVED4,'') ;
		    SET outCBRRef.RESERVED3 =  COALESCE(inDataRef.ns4:RESERVED3,'') ;
		    SET outCBRRef.RESERVED2 =  COALESCE(inDataRef.ns4:RESERVED2,'') ;
		    SET outCBRRef.RESERVED1 =  COALESCE(inDataRef.ns4:RESERVED1,'') ;
		    SET outCBRRef.RECORDSTATUS =  COALESCE(inDataRef.ns4:RECORDSTATUS,'') ;
		    SET outCBRRef.CURRNO =  COALESCE(inDataRef.ns4:CURRNO,'');  
		    
		    DECLARE inputerref REFERENCE TO InputRoot.SOAP.Body.ns:CHEQUEBOOKREQUESTResponse.CHEQUEISSUEType.ns4:gINPUTTER.ns4:INPUTTER[>];
		    CREATE FIELD OutputRoot.JSON.Data.*.CHEQUEISSUEType.gINPUTTER.INPUTTER IDENTITY (JSON.Array)INPUTTER;
		    DECLARE outinputterref REFERENCE TO OutputRoot.JSON.Data.*.CHEQUEISSUEType.gINPUTTER.INPUTTER;
		    WHILE LASTMOVE(inputerref) DO
		    	 CREATE LASTCHILD OF OutputRoot.JSON.Data.*.CHEQUEISSUEType.gINPUTTER.INPUTTER AS outinputterref NAME 'INPUTTER';
		    	SET outinputterref = COALESCE(FIELDVALUE(inDataRef.ns4:gINPUTTER.ns4:INPUTTER),'') ;
		    	MOVE inputerref NEXTSIBLING;
		    END WHILE;
		     
		    DECLARE datetimeref REFERENCE TO InputRoot.SOAP.Body.ns:CHEQUEBOOKREQUESTResponse.CHEQUEISSUEType.ns4:gDATETIME.ns4:DATETIME[>];
		    CREATE FIELD OutputRoot.JSON.Data.*.CHEQUEISSUEType.gDATETIME.DATETIME IDENTITY (JSON.Array)DATETIME;
		    DECLARE outdateref REFERENCE TO OutputRoot.JSON.Data.*.CHEQUEISSUEType.gDATETIME.DATETIME;
		   
		    WHILE LASTMOVE(datetimeref) DO
		    	 CREATE LASTCHILD OF OutputRoot.JSON.Data.*.CHEQUEISSUEType.gDATETIME.DATETIME AS outdateref NAME 'DATETIME';
		    	SET outdateref=COALESCE(FIELDVALUE(inDataRef.ns4:gDATETIME.ns4:DATETIME),'') ;
		    	MOVE datetimeref NEXTSIBLING;
		    END WHILE;  
		    
		     SET outCBRRef.AUTHORISER =  COALESCE(FIELDVALUE(inDataRef.ns4:AUTHORISER),'');
		     SET outCBRRef.COCODE =  COALESCE(FIELDVALUE(inDataRef.ns4:COCODE),'');
		     SET outCBRRef.DEPTCODE =  COALESCE(FIELDVALUE(inDataRef.ns4:DEPTCODE),'');
		     SET outCBRRef.AUDITORCODE =  COALESCE(FIELDVALUE(inDataRef.ns4:AUDITORCODE),'');
		     
--		    DECLARE gNotesref REFERENCE TO InputRoot.SOAP.Body.ns:CHEQUEBOOKREQUESTResponse.CHEQUEISSUEType.ns4:gNOTES.ns4:NOTES[>];
--		    CREATE FIELD OutputRoot.JSON.Data.*.CHEQUEISSUEType.gNOTES.NOTES IDENTITY (JSON.Array)NOTES ;
--		    DECLARE outgNotesref REFERENCE TO OutputRoot.JSON.Data.*.CHEQUEISSUEType.gNOTES.NOTES;
--		    WHILE LASTMOVE(gNotesref)DO
--		    	CREATE LASTCHILD OF OutputRoot.JSON.Data.*.CHEQUEISSUEType.gNOTES.NOTES AS outgNotesref NAME 'NOTES';
--		    	SET outgNotesref =  COALESCE(FIELDVALUE(inDataRef.ns4:gNOTES.ns4:NOTES),'') ;
--		    	MOVE gNotesref NEXTSIBLING;
--		    END WHILE;
--		    
--		    DECLARE gCHGCODEref REFERENCE TO InputRoot.SOAP.Body.ns:CHEQUEBOOKREQUESTResponse.CHEQUEISSUEType.ns4:gCHGCODE.ns4:mCHGCODE[>];
--		    CREATE FIELD OutputRoot.JSON.Data.*.CHEQUEISSUEType.gCHGCODE.mCHGCODE IDENTITY(JSON.Array)mCHGCODE;
--		    DECLARE outchgcoderef REFERENCE TO OutputRoot.JSON.Data.*.gCHGCODE.mCHGCODE;
--		    
--		    WHILE LASTMOVE(gCHGCODEref) DO
--		    	CREATE LASTCHILD OF OutputRoot.JSON.Data.*.CHEQUEISSUEType.gCHGCODE.mCHGCODE AS outchgcoderef NAME 'mCHGCODE';
--		    	SET outchgcoderef.m = COALESCE(FIELDVALUE(gCHGCODEref.m),'');
--		    	SET outchgcoderef.CHGCODE = COALESCE(FIELDVALUE(gCHGCODEref.ns4:CHGCODE),'');
--		    	SET outchgcoderef.CHGAMOUNT=COALESCE(FIELDVALUE(gCHGCODEref.ns4:CHGAMOUNT),'');
--		    	MOVE gCHGCODEref NEXTSIBLING;
--		    END WHILE;
--		    
--		    DECLARE gTAXCODEref REFERENCE TO InputRoot.SOAP.Body.ns:CHEQUEBOOKREQUESTResponse.CHEQUEISSUEType.ns4:gTAXCODE.ns4:mTAXCODE[>];
--		    CREATE FIELD OutputRoot.JSON.Data.*.CHEQUEISSUEType.gTAXCODE.mTAXCODE IDENTITY(JSON.Array)mTAXCODE;
--		    DECLARE outtaxcoderef REFERENCE TO OutputRoot.JSON.Data.*.CHEQUEISSUEType.gTAXCODE.mTAXCODE;
--		    
--		    WHILE LASTMOVE(gTAXCODEref) DO
--		    	CREATE LASTCHILD OF OutputRoot.JSON.Data.*.CHEQUEISSUEType.gTAXCODE.mTAXCODE AS outtaxcoderef NAME 'mTAXCODE';
--		    	SET outtaxcoderef.m=COALESCE(FIELDVALUE(gTAXCODEref.m),'');
--		    	SET outtaxcoderef.TAXCODE=COALESCE(FIELDVALUE(gTAXCODEref.ns4:TAXCODE),'');
--		    	SET outtaxcoderef.TAXAMT=COALESCE(FIELDVALUE(gTAXCODEref.ns4:TAXAMT),'');
--		    	MOVE gTAXCODEref NEXTSIBLING;
--		    END WHILE;
--		    
--		    
--		    
--		    
--		    
--		   
--		    
--		    DECLARE gdeliveryref REFERENCE TO InputRoot.SOAP.Body.ns:CHEQUEBOOKREQUESTResponse.CHEQUEISSUEType.ns4:gDELIVERYREF.ns4:DELIVERYREF[>];
--		    CREATE FIELD OutputRoot.JSON.Data.*.CHEQUEISSUEType.gDELIVERYREF.DELIVERYREF IDENTITY(JSON.Array)DELIVERYREF;
--		    DECLARE outdeliveryref REFERENCE TO OutputRoot.JSON.Data.*.CHEQUEISSUEType.gDELIVERYREF.DELIVERYREF;
--		    
--		    WHILE LASTMOVE(gdeliveryref) DO
--		    	CREATE LASTCHILD OF OutputRoot.JSON.Data.*.CHEQUEISSUEType.gDELIVERYREF.DELIVERYREF AS outdeliveryref NAME 'DELIVERYREF';
--		    	SET outdeliveryref=COALESCE(FIELDVALUE(gdeliveryref),'');
--		    	MOVE gdeliveryref NEXTSIBLING;
--		    END WHILE;
--		    
--		   
--		    
--		    
--		    DECLARE gSTMTNOref REFERENCE TO InputRoot.SOAP.Body.ns:CHEQUEBOOKREQUESTResponse.CHEQUEISSUEType.ns4:gSTMTNO.ns4:STMTNO[>];
--		    CREATE FIELD OutputRoot.JSON.Data.*.CHEQUEISSUEType.gSTMTNO.STMTNO IDENTITY (JSON.Array)STMTNO;
--		    DECLARE outstmtref REFERENCE TO OutputRoot.JSON.Data.*.CHEQUEISSUEType.gSTMTNO.STMTNO;
--		   
--		    WHILE LASTMOVE(gSTMTNOref) DO
--		    	 CREATE LASTCHILD OF OutputRoot.JSON.Data.*.CHEQUEISSUEType.gSTMTNO.STMTNO AS outstmtref NAME 'STMTNO';
--		    	SET outstmtref=COALESCE(FIELDVALUE(gSTMTNOref),'');
--		    	MOVE gSTMTNOref NEXTSIBLING;
--		    END WHILE;
--		    
--		    DECLARE gOverrideref REFERENCE TO InputRoot.SOAP.Body.ns:CHEQUEBOOKREQUESTResponse.CHEQUEISSUEType.ns4:gOVERRIDE.ns4:OVERRIDE[>];
--		    CREATE FIELD OutputRoot.JSON.Data.*.CHEQUEISSUEType.gOVERRIDE.OVERRIDE IDENTITY (JSON.Array)OVERRIDE;
--		    DECLARE outoverrideref REFERENCE TO OutputRoot.JSON.Data.*.CHEQUEISSUEType.gOVERRIDE.OVERRIDE;
--		    
--		    WHILE LASTMOVE(gOverrideref) DO
--		    	CREATE LASTCHILD OF OutputRoot.JSON.Data.*.CHEQUEISSUEType.gOVERRIDE.OVERRIDE AS outoverrideref NAME 'OVERRIDE';
--		    	SET outoverrideref=COALESCE(FIELDVALUE(gOverrideref),'');
--		    	MOVE gOverrideref NEXTSIBLING;
--		    END WHILE;
--		    
		    
		    
		    
		    
		    
		    
		    
		     
		     --SET outCBRRef.AUDITDATETIME =  COALESCE(FIELDVALUE(inDataRef.ns4:AUDITDATETIME),'');
		     CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME 'ESBStatus';
             SET outRef.ESBStatus.status = 'Success';
             SET outRef.ESBStatus.responseCode = 'ESB_BRK_000';
             END IF;
		 	
	
		 	WHEN responcecode LIKE '200'  AND t24ResStatus NOT LIKE 'Success'  THEN
		 		 CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
				  CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
				  CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('CHEQUEBOOKREQUESTResponse');
				  CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('ESBHeader');
				  CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('ESBStatus');
				  DECLARE headerRef REFERENCE TO OutputRoot.JSON.Data.*.ESBHeader;
				  DECLARE errorRef REFERENCE TO OutputRoot.JSON.Data.*.ESBStatus;
				  SET headerRef = Environment.MQRFH2.ESBHeader ;
				  SET errorRef.Status = 'Failure';
		          SET errorRef.responseCode = 'ESB_BRK_'||responcecode ;
		          SET errorRef.errorType = statusRef.successIndicator ;
				DECLARE messageRef REFERENCE TO InputRoot.SOAP.Body.ns:CHEQUEBOOKREQUESTResponse.Status.messages;
				CREATE FIELD errorRef.errorDescription IDENTITY(JSON.Array)errorDescription;
				DECLARE outErrMsgRef REFERENCE TO errorRef.errorDescription;
				WHILE LASTMOVE(messageRef) DO
					CREATE LASTCHILD OF errorRef.errorDescription AS outErrMsgRef NAME 'errorDescription' ;
					SET outErrMsgRef = messageRef ;
					MOVE messageRef NEXTSIBLING ;
				END WHILE;
				
		 	ELSE
		 		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		  	    CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
				CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('CHEQUEBOOKREQUESTResponse');
				CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('ESBHeader');
				CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('ESBStatus');
				DECLARE headerRef REFERENCE TO OutputRoot.JSON.Data.*.ESBHeader;
				DECLARE errorRef REFERENCE TO OutputRoot.JSON.Data.*.ESBStatus;
				SET headerRef = Environment.MQRFH2.ESBHeader ;
				SET errorRef.Status = 'Failure';
		        SET errorRef.responseCode = 'ESB_BRK_'||responcecode  ;
		        SET errorRef.errorType = COALESCE(FIELDVALUE(statusRef.successIndicator),'Null');
		        SET errorRef.errorDescription = 'No Response from T24' ;
		 	
		 END CASE;
		        DECLARE outJsonRef REFERENCE TO OutputRoot.JSON.Data ;
		        DECLARE envRef REFERENCE TO Environment.JSON ;
		        CREATE LASTCHILD  OF Environment AS envRef DOMAIN 'JSON' ;
		        CREATE LASTCHILD OF Environment.JSON.Data NAME 'Data' ;
		        SET envRef = outJsonRef  ;
		        SET chaRes = getPayLoad(FIELDNAME(OutputRoot.JSON),outJsonRef,encodeRef,ccsid);
		 -- DbLogging for the JSON Channel  Response Data --
	            SET OutputRoot.JSON = NULL ; 	       	
--	            IF IsLogRequired LIKE 'Y' THEN
--			     CALL DBLogging(Environment.MQRFH2.ESBHeader.Message_Id,chaRes,'CHEQUEBOOKREQUESTResponse',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outDbRef);
--			     SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
--			     PROPAGATE TO TERMINAL 'out';
--		        END IF;
		  --End of DB Logging
		  SET OutputRoot = NULL;
		  --Log 4j Logging
		  CALL writeToLogFile(MessageFlowLabel, 'ChequeBookRequestApp', 'DEBUG','.............. CHEQUEBOOKREQUESTResponse Transfer Channel Response Logging..........') INTO rc;
		  CALL writeToLogFile(MessageFlowLabel, 'ChequeBookRequestApp', 'DEBUG','Channel Response::'||chaRes) INTO rc;
		  --End of Log4j Logging
		 SET OutputRoot.Properties =InputRoot.Properties ;
		 SET OutputRoot.MQRFH2 = Environment.MQRFH2 ;
		 SET OutputRoot.JSON.Data = envRef ;
		 SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_CBO_HTTP_RES ;
		 
		 
 END;
END MODULE;
CREATE COMPUTE MODULE CHEQUEBOOKREQUEST_MsgFlow_BuildException
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		 CALL BuildException();
		RETURN TRUE;
	END;

	CREATE PROCEDURE BuildException() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE errMsg CHARACTER;
		IF CONTAINS(excpRef.excpText,'connection refused') OR CONTAINS(excpRef.excpText,'SocketTimeoutException')OR CONTAINS(excpRef.excpText,'SocketException') THEN
				SET errMsg = 'Backend Host Timeout';
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE encodeRef REFERENCE TO Environment.Variables.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO Environment.Variables.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'CHEQUEBOOKREQUESTResponse';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'CHEQUEBOOKREQUESTResponse');
		SET Environment.Variables.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.XMLNSC = NULL;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('CHEQUEBOOKREQUESTResponse') ;
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('ESBHeader');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('ESBStatus');
		DECLARE headerRef REFERENCE TO OutputRoot.JSON.Data.*.ESBHeader;
		DECLARE errorRef REFERENCE TO OutputRoot.JSON.Data.*.ESBStatus;
		SET headerRef = Environment.MQRFH2.ESBHeader ;
		SET errorRef.Status = 'Failure';
		SET errorRef.responseCode = Environment.Variables.UserDefinedErrorCodes.CHEQUEBOOKREQUESTResponse.ErrorCode;
		SET errorRef.errorType = Environment.Variables.UserDefinedErrorCodes.CHEQUEBOOKREQUESTResponse.ErrorType;
		IF errMsg IS  NULL THEN
		  SET errorRef.errorDescription = COALESCE(Environment.Variables.UserDefinedErrorCodes.CHEQUEBOOKREQUESTResponse.ActualDesc,'');	
		ELSE
			SET errorRef.errorDescription = errMsg;
			--SET errorRef.actualErrorDescription = COALESCE(Environment.Variables.UserDefinedErrorCodes.CHEQUEBOOKREQUESTResponse.ActualDesc,'');
		END IF;
		MOVE domainDataRef TO OutputRoot.JSON;
		SET Environment.Variables.resMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_CBO_HTTP_RES;
		PROPAGATE TO TERMINAL 'out';
		SET OutputRoot.XMLNSC = Environment.Variables.UserDefinedErrorCodes;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Logging Exception ...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out' ;
		------------Error Logging in DB----------
		CALL Error_DBLogging(Environment.MQRFH2.ESBHeader.Message_Id,Environment.Variables.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.CHEQUEBOOKREQUESTResponse.ErrorCode,outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERR_AUDIT_Q;
	END;
END MODULE;


/*
Author : Rohith
Date of Creation:12-11-2020
Date of Modification:
Application Name : BalanceEnquiry.
Description :
1) From HTTP router we get the JSON data, here we are generating request to T24 URL in Soap.
2) Audit Logging and DB Logging has been done here.
3) After Successful or Unsuccessful response from T24 in Soap, we Audit the responses and send Json data to the Front end via Outgoing Http Router.
*/
   


BROKER SCHEMA com.cbo.co.balanceenquiry
PATH com.cbo.co.common.esql;


DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
DECLARE RAW_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE ERR_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE EXCEPTION_Q EXTERNAL CHARACTER '';
DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
DECLARE ALL_CBO_HTTP_RES EXTERNAL CHARACTER'';
DECLARE BEBackendURL EXTERNAL CHARACTER'';

DECLARE ns NAMESPACE 'http://temenos.com/MMT';
DECLARE ns2 NAMESPACE 'http://temenos.com/ACCTBALCTS';
DECLARE IsLogRequired EXTERNAL CHARACTER'';
DECLARE soapenv NAMESPACE'';
DECLARE ns1 NAMESPACE'';
CREATE COMPUTE MODULE balanceenquiry_request
	CREATE FUNCTION Main() RETURNS BOOLEAN 
	BEGIN
		SET Environment.Variables.Properties = InputRoot.Properties ;
		SET Environment.Variables.MQMD = InputRoot.MQMD;
		CALL BE__GenerateReqToT24();
		RETURN FALSE;
	END;
          CREATE PROCEDURE BE__GenerateReqToT24()
    BEGIN
		
		
		SET Environment.MQRFH2= InputRoot.MQRFH2;
		DECLARE reqMsg,bindingOperatingName CHARACTER '';
		DECLARE rc BOOLEAN FALSE;
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding ;
		DECLARE inRef REFERENCE TO InputRoot.JSON.Data.BalanceEnquiryRequest;
		DECLARE inrefData REFERENCE TO InputRoot.JSON.Data.BalanceEnquiryRequest.ACCTBALCTSType;
		DECLARE inSPCRef REFERENCE TO InputRoot.JSON.Data.BalanceEnquiryRequest.ACCTBALCTSType ;
		SET Environment.Variables.reqMsg = getPayLoad(FIELDNAME(InputBody),inRef.JSON,encodeRef,ccsid);
--		-- SET DBLogging Properties ==============
		DECLARE outRefer REFERENCE TO OutputRoot;
		-- =================== CALLING DB RAW AUDIT LOGGING ==============
--		IF IsLogRequired LIKE 'Y' THEN
--			--CALL DBLogging(Environment.MQRFH2.ESBHeader.Message_Id,Environment.Variables.reqMsg,'Application Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
--			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
--			PROPAGATE TO TERMINAL 'out1';
--		END IF;
		/* =================== CALLING DB RAW AUDIT LOGGING ENDING ==============*/
		/* =================== CALLING LOG4J LOGGING ==============*/
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;

		CALL writeToLogFile(MessageFlowLabel, 'BalanceEnquiryApp', 'DEBUG','==================================**********************************======================================') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'BalanceEnquiryApp', 'DEBUG','..............Start BalanceEnquiryRequest Application Request logging...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'BalanceEnquiryApp', 'DEBUG','Incoming Request::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'BalanceEnquiryApp', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
		/* ========================== FIELD TO FIELD MAPPING =============================================== */
		    CREATE LASTCHILD OF OutputRoot DOMAIN 'SOAP';
		    DECLARE outRef REFERENCE TO OutputRoot.SOAP;
			SET outRef.Context.Namespace.soapenv = 'http://schemas.xmlsoap.org/soap/envelope/';
			SET outRef.Context.Namespace.mmt = 'http://temenos.com/MMT';
			SET outRef.Context.XmlRoot.Envelope.Header = '';
			SET outRef.Context.XmlRoot.Envelope.Body = '';
			SET outRef.Header = '';
			DECLARE arrayref REFERENCE TO InputRoot.JSON.Data.BalanceEnquiryRequest.ACCTBALCTSType.Item[>];
			SET outRef.Body.ns:MMTACCTBALANCE.WebRequestCommon.company = inRef.WebRequestCommon.company;
            SET outRef.Body.ns:MMTACCTBALANCE.WebRequestCommon.password= Environment.MQRFH2.passWord;
			SET outRef.Body.ns:MMTACCTBALANCE.WebRequestCommon.userName = Environment.MQRFH2.userName;
			
			
			WHILE LASTMOVE(arrayref) DO
				CREATE LASTCHILD OF OutputRoot.SOAP.Body.ns:MMTACCTBALANCE.ACCTBALCTSType AS outRef NAME 'enquiryInputCollection';
				SET outRef.columnName=arrayref.columnName;
				SET outRef.criteriaValue=arrayref.criteriaValue;
				SET outRef.operand=arrayref.operand;
				MOVE arrayref NEXTSIBLING;
			END WHILE;
			SET Environment.envoutref = OutputRoot.SOAP;
            --DECLARE envRef REFERENCE TO Environment.SOAP ;
			--CREATE LASTCHILD OF Environment AS envRef DOMAIN 'SOAP' ; 
			--SET envRef = outRef ;
			DECLARE OutRefer REFERENCE TO OutputRoot.SOAP;
			DECLARE envref REFERENCE TO Environment.SOAP;
			CREATE LASTCHILD OF Environment AS envref DOMAIN 'SOAP';
			SET envref = Environment.envoutref;
			SET Environment.reqMsgT24 = getPayLoad(FIELDNAME(InputBody),outRef.Body,encodeRef,ccsid);
			SET OutputRoot = NULL ;
			/* =================== CALLING LOG4J LOGGING  ==============*/
		/* =================== CALLING DB RAW AUDIT LOGGING ==============*/
		--DECLARE outDbRef REFERENCE TO OutputRoot ;
		CALL writeToLogFile(MessageFlowLabel, 'BalanceEnquiryApp', 'DEBUG','..............Start BalanceEnquiry Validation T24  Request logging...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'BalanceEnquiryApp', 'DEBUG','T24 Request::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'BalanceEnquiryApp', 'DEBUG',Environment.t24ValidationReq) INTO rc;
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Environment.MQRFH2.ESBHeader.Message_Id,Environment.reqMsgT24,'T24 Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		/* =================== CALLING DB RAW AUDIT LOGGING ENDING ==============*/
		SET OutputRoot.Properties = InputRoot.Properties ;
		--SET OutputRoot.SOAP = envRef ;
		SET OutputRoot.SOAP = Environment.envoutref;
		SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.WebServiceURL = BEBackendURL ;
		PROPAGATE TO TERMINAL 'out';
			
	END;
END MODULE;



CREATE COMPUTE MODULE balanceenquiry_response
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		CALL BE__GenerateResToChannel();
		RETURN FALSE;
	END;

	CREATE PROCEDURE BE__GenerateResToChannel() BEGIN
	    DECLARE rc BOOLEAN FALSE;
	    /* =================== CALLING LOG4J LOGGING ==============*/
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE bindingOperatingName CHARACTER'';
		/*============= Based on the response code will propagate to channel===============*/
		
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId ;
	    DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE responceCode CHARACTER InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code" ;
		DECLARE inSoapRef REFERENCE TO InputRoot.SOAP ;
		DECLARE inRef REFERENCE TO InputRoot;
		DECLARE statusRef REFERENCE TO InputRoot.SOAP.Body.ns:MMTACCTBALANCEResponse.Status;
		DECLARE successIndicator CHARACTER statusRef.successIndicator;
		SET Environment.t24resMsg = getPayLoad(FIELDNAME(InputBody),inSoapRef,encodeRef,ccsid);
		
		IF IsLogRequired LIKE 'Y' THEN
				CALL DBLogging(Environment.MQRFH2.ESBHeader.Message_Id,Environment.t24resMsg,'T24 Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
				PROPAGATE TO TERMINAL 'out';
			END IF;
		CALL writeToLogFile(MessageFlowLabel, 'BalanceEnquiryApp', 'DEBUG','..............Start T24 Response  logging...........') INTO rc;
	    CALL writeToLogFile(MessageFlowLabel, 'BalanceEnquiryApp', 'DEBUG','T24 Response::') INTO rc;
	    CALL writeToLogFile(MessageFlowLabel, 'BalanceEnquiryApp', 'DEBUG',Environment.t24resMsg) INTO rc;
		  SET OutputRoot = NULL;
		  --Log 4j Logging
		
		  --End of Log4j Logging
		  IF responceCode LIKE '200' AND successIndicator LIKE 'Success' THEN
		    IF statusRef.messages IS NOT NULL THEN
		    	CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
				  CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
				  CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('BalanceEnquiryResponse');
				  CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('ESBHeader');
				  CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('ESBStatus');
				  DECLARE headerRef REFERENCE TO OutputRoot.JSON.Data.*.ESBHeader;
				  DECLARE errorRef REFERENCE TO OutputRoot.JSON.Data.*.ESBStatus;
				 SET headerRef = Environment.MQRFH2.ESBHeader ;
				SET errorRef.Status = 'Failure';
		        SET errorRef.responseCode = 'ESB_BRK_'||responceCode ;
		         SET errorRef.errorType = 'Functional Error' ;
				DECLARE messageRef REFERENCE TO inSoapRef.Body.ns:MMTACCTBALANCEResponse.Status.messages;
				CREATE FIELD errorRef.errorDescription IDENTITY(JSON.Array)errorDescription;
				DECLARE msgRef REFERENCE TO errorRef.errorDescription;
				WHILE LASTMOVE(messageRef) DO
					CREATE LASTCHILD OF errorRef.errorDescription AS msgRef NAME 'errorDescription' ;
					SET msgRef = messageRef ;
					MOVE messageRef NEXTSIBLING ;
				END WHILE;
			ELSE
		  	CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON' ;
		  	CREATE LASTCHILD OF OutputRoot.JSON NAME 'Data';
		  	CREATE LASTCHILD OF OutputRoot.JSON.Data  NAME 'BalanceEnquiryResponse';
		  	CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME 'ESBHeader';	
		  	CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME 'Status';
		  	CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME 'ACCTBALCTSType';
		  --	CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME 'ESBStatus';
		  	
		    DECLARE inDataRef REFERENCE TO InputRoot.SOAP.Body.ns:MMTACCTBALANCEResponse.ACCTBALCTSType;
--		   
        --  DECLARE outStatusRef REFERENCE TO OutputRoot.JSON.Data.BalanceEnquiryResponse.Status ;
--		    DECLARE esbStatusRef REFERENCE TO OutputRoot.JSON.Data.BalanceEnquiryResponse.ESBStatus ;
--		    DECLARE inStatusRef REFERENCE TO  InputRoot.SOAP.Body.ns:MMTACCTBALANCEResponse.Status; 
		     DECLARE outRef REFERENCE TO OutputRoot.JSON.Data.BalanceEnquiryResponse;
             SET outRef.ESBHeader = Environment.MQRFH2.ESBHeader ;
             SET outRef.Status = statusRef;
--		    SET outStatusRef.transactionId = COALESCE(FIELDVALUE(inStatusRef.transactionId),'');
--		    SET outStatusRef.messageId = COALESCE(FIELDVALUE(inStatusRef.messageId),'');
--		    SET outStatusRef.successIndicator = COALESCE(FIELDVALUE(inStatusRef.successIndicator),'');
--		    SET outStatusRef.application = COALESCE(FIELDVALUE(inStatusRef.application),'');
--		    SET outStatusRef.messages = COALESCE(FIELDVALUE(inStatusRef.messages),'');
		    
		    SET OutputRoot.JSON.Data.BalanceEnquiryResponse.ACCTBALCTSType.ZERORECORDS =  COALESCE(FIELDVALUE(inDataRef.ns2:ZERORECORDS),'') ; 
		    
		    
		    DECLARE inSoapRef REFERENCE TO InputRoot.SOAP.Body.ns:MMTACCTBALANCEResponse.ACCTBALCTSType.ns2:gACCTBALCTSDetailType.ns2:mACCTBALCTSDetailType[>];
		    DECLARE outBERes REFERENCE TO OutputRoot.JSON.Data.*.ACCTBALCTSType.gACCTBALCTSDetailType.mACCTBALCTSDetailType;
		    CREATE FIELD OutputRoot.JSON.Data.*.ACCTBALCTSType.gACCTBALCTSDetailType.mACCTBALCTSDetailType IDENTITY(JSON.Array)mACCTBALCTSDetailType;
		    
		    WHILE LASTMOVE(inSoapRef)  DO
		     CREATE LASTCHILD OF OutputRoot.JSON.Data.*.ACCTBALCTSType.gACCTBALCTSDetailType.mACCTBALCTSDetailType AS outBERes NAME 'mACCTBALCTSDetailType' ;	
		     SET outBERes = inSoapRef;
--		     SET outBERes.AccountNo = COALESCE(FIELDVALUE(inDataRef.ns2:gACCTBALCTSDetailType.ns2:mACCTBALCTSDetailType.ns2:AccountNo),'') ;
--		     SET outBERes.Customer= COALESCE(FIELDVALUE(inDataRef.ns2:gACCTBALCTSDetailType.ns2:mACCTBALCTSDetailType.ns2:Customer),'') ;
--		     SET outBERes.AcctNo= COALESCE(FIELDVALUE(inDataRef.ns2:gACCTBALCTSDetailType.ns2:mACCTBALCTSDetailType.ns2:AcctNo),'') ;
--		     SET outBERes.Name= COALESCE(FIELDVALUE(inDataRef.ns2:gACCTBALCTSDetailType.ns2:mACCTBALCTSDetailType.ns2:Name),'') ;
--		     SET outBERes.Limitref= COALESCE(FIELDVALUE(inDataRef.ns2:gACCTBALCTSDetailType.ns2:mACCTBALCTSDetailType.ns2:Limitref),'') ;
--		     SET outBERes.Product= COALESCE(FIELDVALUE(inDataRef.ns2:gACCTBALCTSDetailType.ns2:mACCTBALCTSDetailType.ns2:Product),'') ;
--		     SET outBERes.Ccy= COALESCE(FIELDVALUE(inDataRef.ns2:gACCTBALCTSDetailType.ns2:mACCTBALCTSDetailType.ns2:Ccy),'') ;
--		     SET outBERes.WorkingBal= COALESCE(FIELDVALUE(inDataRef.ns2:gACCTBALCTSDetailType.ns2:mACCTBALCTSDetailType.ns2:WorkingBal),'') ;
--		     SET outBERes.LedgerBal= COALESCE(FIELDVALUE(inDataRef.ns2:gACCTBALCTSDetailType.ns2:mACCTBALCTSDetailType.ns2:LedgerBal),'') ;
--		     SET outBERes.ClearedBal= COALESCE(FIELDVALUE(inDataRef.ns2:gACCTBALCTSDetailType.ns2:mACCTBALCTSDetailType.ns2:ClearedBal),'') ;
--		     SET outBERes.DateFrom= COALESCE(FIELDVALUE(inDataRef.ns2:gACCTBALCTSDetailType.ns2:mACCTBALCTSDetailType.ns2:DateFrom),'') ;
--		     SET outBERes.LockedAmount= COALESCE(FIELDVALUE(inDataRef.ns2:gACCTBALCTSDetailType.ns2:mACCTBALCTSDetailType.ns2:LockedAmount),'') ;
--		     SET outBERes.UseableBal= COALESCE(FIELDVALUE(inDataRef.ns2:gACCTBALCTSDetailType.ns2:mACCTBALCTSDetailType.ns2:UseableBal),'') ;
--		     SET outBERes.LMAMOUNT= COALESCE(FIELDVALUE(inDataRef.ns2:gACCTBALCTSDetailType.ns2:mACCTBALCTSDetailType.ns2:LMAMOUNT),'') ;
		     
		     MOVE inSoapRef NEXTSIBLING;
		    END WHILE;
		    CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME 'ESBStatus';
					SET outRef.ESBStatus.status = 'Success';
					SET outRef.ESBStatus.responseCode = 'ESB_BRK_000'; 
            END IF;
		  	
		  ELSEIF responceCode  LIKE '200' AND successIndicator NOT LIKE 'Success' THEN
		  	 CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
				CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
				CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('BalanceEnquiryResponse');
				CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('ESBHeader');
				CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('ESBStatus');
				DECLARE headerRef REFERENCE TO OutputRoot.JSON.Data.*.ESBHeader;
				DECLARE errorRef REFERENCE TO OutputRoot.JSON.Data.*.ESBStatus;
				SET headerRef = Environment.MQRFH2.ESBHeader ;
				SET errorRef.Status = 'Failure';
		        SET errorRef.responseCode ='ESB_BRK_'||responceCode;
		        SET errorRef.errorType = statusRef.successIndicator ;
		        DECLARE messageRef REFERENCE TO InputRoot.SOAP.Body.ns:MMTACCTBALANCEResponse.Status.messages;
		       CREATE FIELD errorRef.errorDescription IDENTITY(JSON.Array)errorDescription;
				DECLARE msgRef REFERENCE TO errorRef.errorDescription;
				WHILE LASTMOVE(messageRef) DO
					CREATE LASTCHILD OF errorRef.errorDescription AS msgRef NAME 'errorDescription' ;
					SET msgRef = messageRef ;
					MOVE messageRef NEXTSIBLING ;
				END WHILE;
		     	         
		  ELSE 
		     	CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
				CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
				CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('BalanceEnquiryResponse');
				CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('ESBHeader');
				CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('ESBStatus');
				DECLARE headerRef REFERENCE TO OutputRoot.JSON.Data.*.ESBHeader;
				DECLARE errorRef REFERENCE TO OutputRoot.JSON.Data.*.ESBStatus;
				SET headerRef = Environment.MQRFH2.ESBHeader ;
				SET errorRef.Status = 'Failure'; 
		        SET errorRef.responseCode = 'ESB_BRK_'||responceCode ;
		        SET errorRef.errorType = statusRef.successIndicator ;
		        SET errorRef.errorDescription = 'No Response from T24' ;
           END IF;
		   DECLARE outJsonRef REFERENCE TO OutputRoot.JSON.Data;
		  SET Environment.XMLREF = OutputRoot.JSON.Data;
		  SET OutputRoot.JSON.Data=Environment.XMLREF;
		 --SET OutputRoot.XMLNSC.resultdata =outJsonRef;
		-- SET Environment.XData= ASBITSTREAM(OutputRoot.JSON.Data CCSID 1041 ENCODING 546);
		  --PROPAGATE TO TERMINAL 'out1';
		  DECLARE envRef REFERENCE TO Environment.JSON;
		  CREATE LASTCHILD  OF Environment AS envRef DOMAIN 'JSON';
		  CREATE LASTCHILD OF Environment.JSON.Data NAME 'Data' ;
		  SET envRef = outJsonRef  ;
			--SET Environment.Variables.Data = ASBITSTREAM(OutputRoot.JSON.Data CCSID InputRoot.Properties.Encoding);
		  SET Environment.reqMsgChannel = getPayLoad(FIELDNAME(OutputRoot.JSON),outJsonRef,encodeRef,ccsid);
		  
		 -- DbLogging for the JSON Channel  Response Data --
	      SET OutputRoot.JSON = NULL ; 	       		
--	      IF IsLogRequired LIKE 'Y' THEN
--			--CALL DBLogging(Environment.MQRFH2.ESBHeader.Message_Id,Environment.reqMsgChannel,'BalanceEnquiryResponse Channel Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
--			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
--			PROPAGATE TO TERMINAL 'out';
--		  END IF;
		  --End of DB Logging
		  SET OutputRoot = NULL;
		  --Log 4j Logging
		  CALL writeToLogFile(MessageFlowLabel, 'BalanceEnquiryApp', 'DEBUG','.............. BalanceEnquiryResponse Channel Response Logging..........') INTO rc;
		  CALL writeToLogFile(MessageFlowLabel, 'BalanceEnquiryApp', 'DEBUG','Channel Response::'||Environment.reqMsgChannel) INTO rc;
		  --End of Log4j Logging
		 SET OutputRoot.Properties =InputRoot.Properties;
		 SET OutputRoot.MQRFH2 = Environment.MQRFH2 ;
		 SET OutputRoot.JSON.Data = envRef ;
		 SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_CBO_HTTP_RES;
		 PROPAGATE TO TERMINAL 'out';
 
	END;
	
END MODULE;




CREATE COMPUTE MODULE balanceenquiry_exceptionpropagation
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL BuildException();
		RETURN TRUE;
	END;

	
CREATE PROCEDURE BuildException() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE errMsg CHARACTER;
		IF CONTAINS(excpRef.excpText,'connection refused') OR CONTAINS(excpRef.excpText,'SocketTimeoutException')OR CONTAINS(excpRef.excpText,'SocketException') THEN
				SET errMsg = 'Backend Host Timeout';
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE encodeRef REFERENCE TO Environment.Variables.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO Environment.Variables.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'BalanceEnquiryResponse';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'BalanceEnquiryResponse');
		SET Environment.Variables.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.XMLNSC = NULL;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('BalanceEnquiryResponse');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('ESBHeader');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('ESBStatus');
		DECLARE headerRef REFERENCE TO OutputRoot.JSON.Data.*.ESBHeader;
		DECLARE errorRef REFERENCE TO OutputRoot.JSON.Data.*.ESBStatus;
		SET headerRef = Environment.MQRFH2.ESBHeader ;
		SET errorRef.Status = 'Failure'; 
		SET errorRef.responseCode = Environment.Variables.UserDefinedErrorCodes.BalanceEnquiryResponse.ErrorCode;
		SET errorRef.errorType = Environment.Variables.UserDefinedErrorCodes.BalanceEnquiryResponse.ErrorType;
		IF errMsg IS NULL THEN
		  SET errorRef.errorDescription = COALESCE(Environment.Variables.UserDefinedErrorCodes.BalanceEnquiryResponse.ActualDesc,'');	
		ELSE
			SET errorRef.errorDescription = errMsg ;
			--SET errorRef.actualErrorDescription = COALESCE(Environment.Variables.UserDefinedErrorCodes.BalanceEnquiryResponse.ActualDesc,'');
		END IF;
		MOVE domainDataRef TO OutputRoot.JSON;
		SET Environment.Variables.resMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_CBO_HTTP_RES ;
		PROPAGATE TO TERMINAL 'out';
		SET OutputRoot.XMLNSC = Environment.Variables.UserDefinedErrorCodes;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Logging Exception ...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out';
		------------Error Logging in DB----------
		CALL Error_DBLogging(Environment.MQRFH2.ESBHeader.Message_Id,Environment.Variables.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.BalanceEnquiryResponse.ErrorCode,outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERR_AUDIT_Q;
	END;
	
END MODULE;




